% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reprex-undo.R
\name{un-reprex}
\alias{un-reprex}
\alias{reprex_clean}
\alias{reprex_invert}
\title{Un-render a reprex}
\usage{
reprex_clean(x = NULL, comment = "^#>")

reprex_invert(x = NULL, venue = c("gh", "so"), comment = "^#>")
}
\arguments{
\item{x}{character, holding the lines of a displayed or rendered reprex. If
not provided, the clipboard is consulted for input.}

\item{comment}{regular expression that matches commented output lines}

\item{venue}{"gh" for GitHub (default) or "so" for StackOverflow.}
}
\value{
character vector holding just the clean R code, invisibly
}
\description{
Recover the input of \code{\link{reprex}()} from its output, at least
approximately. The clean reprex code is printed, returned invisibly, and
written to the clipboard, if possible.
}
\section{Functions}{
\itemize{
\item \code{reprex_clean}: Removes lines of commented output from a displayed
reprex, such as code copied from a GitHub issue.

\item \code{reprex_invert}: Attempts to reverse the effect of
\code{\link{reprex}()}. The input should be Markdown, presumably the output
of \code{\link{reprex}()}. \code{venue} matters because, in GitHub-flavored
Markdown, code blocks are placed within triple backticks. In other Markdown
dialects, such as the one used on StackOverflow, code is indented by four
spaces.
}}

\examples{
## a displayed reprex can be cleaned of commented output
x <- c(
  "## a regular comment, which is retained",
  "(x <- 1:4)",
  "#> [1] 1 2 3 4",
  "median(x)",
  "#> [1] 2.5"
  )
reprex_clean(x)
## a rendered reprex can be inverted, at least approximately
x <- reprex({
  #' Some text
  #+ chunk-label-and-options-cannot-be-recovered, message = TRUE
  (x <- 1:4)
  #' More text
  y <- 2:5
  x + y
}, show = FALSE)
x
reprex_invert(x)
}
